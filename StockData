function fetchStockData(apiKey, symbol, canvasId) {
    const cacheKey = `${symbol}_data`;
    const cachedData = localStorage.getItem(cacheKey);

    if (cachedData) {
        const data = JSON.parse(cachedData);

        const isOneDayOld = (new Date()) - new Date(data.timestamp) < 86400000;
        if (isOneDayOld) {
            const timeSeries = data.timeSeries; // Define timeSeries here
            const dates = Object.keys(timeSeries).reverse();
            const closingPrices = dates.map(date => parseFloat(timeSeries[date]['4. close']));

            if (document.querySelector('.info')) {
                updateStockDetails(timeSeries, symbol);
            }

            renderChart(dates, closingPrices, symbol, canvasId);
            return;
        }
    }

    const apiUrl = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${apiKey}`;

    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            if (!data || !data['Time Series (Daily)']) {
                console.error('No data available or invalid response structure:', data);
                return;
            }

            const timeSeries = data['Time Series (Daily)']; // Define timeSeries here
            localStorage.setItem(cacheKey, JSON.stringify({ timestamp: new Date(), timeSeries }));

            const dates = Object.keys(timeSeries).reverse();
            const closingPrices = dates.map(date => parseFloat(timeSeries[date]['4. close']));

            if (document.querySelector('.info')) {
                updateStockDetails(timeSeries, symbol);
            }

            renderChart(dates, closingPrices, symbol, canvasId);
        })
        .catch(error => console.error('Error fetching data:', error));
}

function updateStockDetails(timeSeries, symbol) {
    const latestDate = Object.keys(timeSeries)[0]; // Get the latest date
    const latestData = timeSeries[latestDate]; // Get the data for the latest date

    // Extracting the required data from the latestData
    const openingPrice = parseFloat(latestData['1. open']);
    const closingPrice = parseFloat(latestData['4. close']);
    const highPrice = parseFloat(latestData['2. high']);
    const lowPrice = parseFloat(latestData['3. low']);

    // Calculate price change as a percentage
    const priceChangePercent = ((closingPrice - openingPrice) / openingPrice) * 100;

    // Update HTML content with latest stock details
    // Check if the elements exist before updating them
    const marketValueElement = document.querySelector('.info h3:nth-child(2) + p');
    if (marketValueElement) {
        marketValueElement.textContent = `${closingPrice.toFixed(2)}`; // Market Value (Close Price)
    }

    const priceChangeElement = document.querySelector('.info h3:nth-child(4) + p');
    if (priceChangeElement) {
        const priceChangeText = (priceChangePercent >= 0) ? 
            `+${priceChangePercent.toFixed(2)}%` : // Positive change
            `${priceChangePercent.toFixed(2)}%`;   // Negative change (minus sign is automatically included)
        priceChangeElement.textContent = priceChangeText; // Price Change in percent
    }

    const openingPriceElement = document.querySelector('.info h3:nth-child(6) + p');
    if (openingPriceElement) {
        openingPriceElement.textContent = `${openingPrice.toFixed(2)}`; // Opening Price
    }

    const highPriceElement = document.querySelector('.info h3:nth-child(8) + p');
    if (highPriceElement) {
        highPriceElement.textContent = `${highPrice.toFixed(2)}`; // High Price
    }

    const lowPriceElement = document.querySelector('.info h3:nth-child(10) + p');
    if (lowPriceElement) {
        lowPriceElement.textContent = `${lowPrice.toFixed(2)}`; // Low Price
    }
}


function renderChart(dates, closingPrices, symbol, canvasId) {
    console.log('Dates:', dates);
    console.log('Closing Prices:', closingPrices);
    const ctx = document.getElementById(canvasId).getContext('2d');
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: dates,
            datasets: [{
                label: `${symbol} Stock Price`,
                data: closingPrices,
                backgroundColor: 'rgba(0, 123, 255, 0.5)',
                borderColor: 'rgba(0, 123, 255, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: false
                }
            }
        }
    });
}

function calculateProjection() {
    const numberOfShares = document.getElementById('projected').value;
    const currentPrice = parseFloat(document.querySelector('.info h3:nth-child(2) + p').textContent);
    const estimatedGrowthRate = 0.05;

    if (!isNaN(numberOfShares) && !isNaN(currentPrice)) {
        const projectedValue = numberOfShares * currentPrice * (1 + estimatedGrowthRate);
        document.getElementById('projectionResult').textContent = `Projected value in 1 year: $${projectedValue.toFixed(2)}`;
    } else {
        document.getElementById('projectionResult').textContent = "Please enter a valid number of shares and ensure market value is loaded.";
    }
}
